import tkinter as tk
from tkinter import ttk
from tkinter import messagebox as mb

import global_var as gv

def display_result(self):
    
    self.top = tk.Toplevel(self)
    self.top.title("SQL Result")
    self.top.configure(bg="#b7d7c7")
    
    window_height = 900
    window_width = 1280
    screen_width = self.top.winfo_screenwidth()
    screen_height = self.top.winfo_screenheight()
    x_cordinate = int((screen_width/2) - (window_width/2))
    y_cordinate = int((screen_height/2) - (window_height/2))
    self.top.geometry("{}x{}+{}+{}".format(window_width, window_height, x_cordinate, y_cordinate))
    
    
    self.top.columnconfigure(0,weight=24)
    self.top.columnconfigure(1,weight=1)
    self.top.columnconfigure(2,weight=6)
    self.top.columnconfigure(3,weight=6)
    
    self.sql_cmd = tk.StringVar()
    
    ## GUI Text box to show result of sql query
    self.result_text = tk.Text(self.top)
    self.result_text.grid(column=0, row=3, pady=4, padx=(20,1), sticky='nws')
    self.result_text.configure(background="#d8f8d8", wrap="word", height=40, width=150)
    self.result_text.delete(1.0,tk.END)
    self.text_scroll = ttk.Scrollbar(self.top, orient=tk.VERTICAL, command=self.result_text.yview)
    self.text_scroll.grid(column=0, row=3, sticky='nse', rowspan=20, pady=4)
    self.result_text['yscrollcommand'] = self.text_scroll.set
    
    ## GUI Entry to show sql query text
    self.sql_cmd.set(self.sql_message)
    self.sql_query_label = tk.Label(self.top, text="SQL Command:")
    self.sql_query_label.grid(column=0, row=1, sticky='w', padx=(20,1))
    self.sql_query_text = tk.Entry(self.top, textvariable=self.sql_cmd, state=tk.DISABLED, width=150)
    self.sql_query_text.grid(column=0,columnspan=2,row=2,sticky='w',padx=(20,1))
    self.sql_query_text.configure(bg="#000000", fg="#ffffff")
    
    ## Note: self.query_result is a list of tuples
    for line in list(self.query_result):
        #print("line from query_result: ",line)
        text_line = ""
        for s in line:
            try:
                if s.replace('"','') != 'None':
                    if len(line) == 1:
                        text_line += s.replace('"','')
                    else:
                        text_line += s.replace('"','')+" "
            except:  ## first element might be a int()
                continue
        #print("text_line: ",text_line)
        #print("length of text_line: ",len(text_line))
        #if text_line[:-1] != '\n':
        text_line += '\n'
        if text_line != '\n':
            self.result_text.insert(tk.END,text_line)
    
    
    
    
    self.cancel2_button = ttk.Button(self.top, text = "Cancel", command = self.top.destroy)
    self.cancel2_button.grid(row=0, column = 0, padx=(20,20), pady=(8,8))
    
    self.top.grab_set()
    self.top.bind('<Escape>', lambda x: self.top.destroy())